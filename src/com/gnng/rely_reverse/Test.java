package com.gnng.rely_reverse;

/**
 * 依赖倒转原则
 * 1.抽象不应该依赖细节，细节应该依赖抽象（要针对接口编程，不应该面对实现编程）
 * 2.依赖倒转的原则：高层模块不应该依赖低层模块，但他们都应该依赖抽象
 * 				抽象不依赖细节，细节依赖抽象[ASD]。
 * 3.里氏代换原则[LSP]:子类型必须能够替换掉他们的父类型。
 * 		只有当当子类可以完全替换父类，软件单位的功能不受到影响的时候，父类才能真正的被复用，而子类也可以在父类的基础上增加新的行为。
 * 4.依赖倒转其实可以说是面向对象设计的标志，用哪种编程语音不重要，如果编写时考虑的都是如何面向对象编程而不是针对细节编程，即所有的依赖关系都是终止于抽象类或接口，
 * 	 那就是面向对象式编程,否则就是过程化的设计了。
 * @author gnng
 *
 */
public class Test {

}
